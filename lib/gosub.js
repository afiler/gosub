// Generated by CoffeeScript 1.7.1
(function() {
  var DEBUG;

  window.debug = Function.prototype.bind.call(console.log, console);

  DEBUG = true;

  window.gosub = {
    run: function(block) {
      this.call(block);
    },
    call: function(block) {
      var self;
      self = this;
      console.log(block);
      return block.block.forEach((function(_this) {
        return function(el) {
          var val;
          val = _this.resolve(el);
          window.write(el + "\n" + val);
          return val;
        };
      })(this));
    },
    resolve: function(el) {
      var resolved_args, resolved_fn, result, val;
      debug("resolve(%o)", el);
      if (!el) {
        return;
      }
      if (el.constructor === Fn) {
        debug("Resolving Fn %s", el.id);
        resolved_fn = this.resolve(el.id);
        debug("resolved_fn %s", resolved_fn);
        resolved_args = this.resolve(el.args);
        debug("preresolved_args %s length %d", jsDump.parse(resolved_args), resolved_args.length);
        debug("preresolved_args (%o)", resolved_args);
        if (resolved_args.constructor !== Array) {
          resolved_args = [resolved_args];
        }
        debug("resolved_args %s length %d", jsDump.parse(resolved_args), resolved_args.length);
        debug("resolved_args (%o)", resolved_args);
        console.log(resolved_fn);
        result = resolved_fn.apply(window.gosub.scope, resolved_args);
        debug("applied result %s", result);
        return result;
      } else if (el.constructor === Id) {
        val = window.gosub.scope._get(el.name);
        debug("Resolving Id %s => %s", el, val);
        return val;
      } else if (el.constructor === Array) {
        debug("Resolving array %s", el);
        return el.map((function(_this) {
          return function(x) {
            return _this.resolve(x);
          };
        })(this));
      } else {
        debug("Value? %o", el);
        return el;
      }
    }
  };

}).call(this);
